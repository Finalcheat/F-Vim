# nginx module

snippet ngxcommand "ngx_command_t;"
static ngx_command_t ngx_http_${1:my}_commands[] = {
	{
		ngx_string("${2:$1}"),
		NGX_HTTP_LOC_CONF | NGX_CONF_TAKE1,
		ngx_conf_set_str_slot,
		NGX_HTTP_LOC_CONF_OFFSET,
		offsetof(ngx_http_${3:$1}_loc_conf_t, ${4:$1}),
		NULL
	},
	ngx_null_command
};
endsnippet


snippet ngxprasename "char *(set*)(ngx_conf_t *cf, ngx_command_t *cmd, void *conf);"
static char *ngx_http_${1:my}(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
	ngx_http_core_loc_conf_t *clcf = ngx_http_conf_get_module_loc_conf(cf, ngx_http_core_module);
	clcf->handler = ngx_http_${2:$1}_handler;
	return NGX_CONF_OK;
}
endsnippet


snippet ngxmodule "ngx_module_t"
ngx_module_t ngx_http_${1:my}_module = {
	NGX_MODULE_V1,
	&ngx_http_${2:$1}_module_ctx,
	ngx_http_${3:$1}_commands,
	NGX_HTTP_MODULE,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NGX_MODULE_V1_PADDING
};
endsnippet


snippet ngxhttpmodule "ngx_http_module_t"
static ngx_http_module_t ngx_http_${1:my}_module_ctx = {
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL
};
endsnippet




snippet ngxhttphandler "typedef ngx_int_t (*ngx_http_handler_pt)(ngx_http_request_t *r)"
static ngx_int_t ngx_http_${1:my}_handler(ngx_http_request_t *r)
{
	ngx_int_t rc = ngx_http_discard_request_body(r);
	if (rc != NGX_OK) {
		return rc;
	}
	rc = ngx_http_send_header(r);
	return rc;
}
endsnippet







snippet ngxinclude "#include nginx module"
#include <core/ngx_core.h>
#include <core/ngx_config.h>
#include <http/ngx_http.h>
endsnippet




snippet ngxstderrlog "ngx_log_error(NGX_LOG_STDERR, r->connection->log, 0)"
ngx_log_error(NGX_LOG_STDERR, r->connection->log, 0);
endsnippet


snippet ngxemerglog "ngx_log_error(NGX_LOG_EMERG, r->connection->log, 0)"
ngx_log_error(NGX_LOG_EMERG, r->connection->log, 0);
endsnippet



snippet ngxinfolog "ngx_log_error(NGX_LOG_INFO, r->connection->log, 0)"
ngx_log_error(NGX_LOG_INFO, r->connection->log, 0);
endsnippet











